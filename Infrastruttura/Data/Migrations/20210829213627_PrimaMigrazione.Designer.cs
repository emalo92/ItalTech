// <auto-generated />
using System;
using Infrastruttura.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastruttura.Data.Migrations
{
    [DbContext(typeof(ItalTechDbContext))]
    [Migration("20210829213627_PrimaMigrazione")]
    partial class PrimaMigrazione
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AnalisiDiMercatoProgetti", b =>
                {
                    b.Property<int>("Codice")
                        .HasColumnType("int");

                    b.Property<string>("CodiceOperatore")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datainizio")
                        .HasColumnType("datetime");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NomeOperatore")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Risultato")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Codice")
                        .HasName("PK_AnalisiDiMercato");

                    b.HasIndex("CodiceOperatore");

                    b.HasIndex("CodiceProgetto");

                    b.ToTable("AnalisiDiMercatoProgetti");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Cliente", b =>
                {
                    b.Property<string>("CodFiscale")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cap")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Citta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DataDiNascita")
                        .HasColumnType("datetime");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CodFiscale");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Componente", b =>
                {
                    b.Property<string>("CodiceFornitura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<int>("NumPezzi")
                        .HasColumnType("int");

                    b.HasKey("CodiceFornitura", "CodiceProgetto");

                    b.HasIndex("CodiceProgetto");

                    b.ToTable("Componente");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Fornitore", b =>
                {
                    b.Property<string>("PartitaIva")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cap")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Città")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NumTelefono")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RagioneSociale")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PartitaIva");

                    b.ToTable("Fornitore");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Fornitura", b =>
                {
                    b.Property<string>("Codice")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CodiceFornitore")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("CostoAlKg")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("CostoPerPezzo")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.Property<string>("SettoreDeposito")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Tipo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Codice");

                    b.HasIndex("CodiceFornitore");

                    b.ToTable("Fornitura");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Impiegato", b =>
                {
                    b.Property<string>("CodFiscale")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("AziendaId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AziendaID");

                    b.Property<string>("Cap")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Citta")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DataDiNascita")
                        .HasColumnType("datetime");

                    b.Property<string>("Indirizzo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("CodFiscale");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AziendaId" }, "IX_Impiegato")
                        .IsUnique();

                    b.ToTable("Impiegato");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.OrdineForniture", b =>
                {
                    b.Property<int>("CodiceOrdine")
                        .HasColumnType("int");

                    b.Property<string>("CodiceFornitura")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantità")
                        .HasColumnType("int");

                    b.HasKey("CodiceOrdine", "CodiceFornitura");

                    b.HasIndex("CodiceFornitura");

                    b.ToTable("OrdineForniture");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Ordini", b =>
                {
                    b.Property<int>("Codice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataCreazione")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataInvio")
                        .HasColumnType("datetime");

                    b.Property<string>("Operatore")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Codice");

                    b.HasIndex("Operatore");

                    b.ToTable("Ordini");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoAssemblato", b =>
                {
                    b.Property<int>("Codice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FasciaDiMercato")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Lotto")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Peso")
                        .HasColumnType("float");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("Codice");

                    b.HasIndex("CodiceProgetto");

                    b.ToTable("ProdottoAssemblato");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoCase", b =>
                {
                    b.Property<int>("Codice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<string>("Colore")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Lotto")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("PesoKg")
                        .HasColumnType("float");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("Codice");

                    b.HasIndex("CodiceProgetto");

                    b.ToTable("ProdottoCase");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Progetto", b =>
                {
                    b.Property<int>("Codice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cliente")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("CodiceAnalisiMercato")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostoFinale")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("CostoPrevisto")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("DataFine")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NomeProgetto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Codice");

                    b.HasIndex("Cliente");

                    b.HasIndex("ProjectManager");

                    b.ToTable("Progetto");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Prototipo", b =>
                {
                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime");

                    b.Property<string>("Descrizione")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Modifiche")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MotivoFallimento")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("RisultatoTest")
                        .HasColumnType("bit");

                    b.HasKey("Numero", "CodiceProgetto")
                        .HasName("PK_Prototipo2");

                    b.HasIndex("CodiceProgetto");

                    b.ToTable("Prototipo");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.RichiestaProgetto", b =>
                {
                    b.Property<int>("Codice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Cliente")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("CodiceProgetto")
                        .HasColumnType("int");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("EsitoStudio")
                        .HasColumnType("bit");

                    b.Property<string>("Operatore")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Codice");

                    b.HasIndex("Cliente");

                    b.HasIndex("CodiceProgetto");

                    b.HasIndex("Operatore");

                    b.ToTable("RichiestaProgetto");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Test", b =>
                {
                    b.Property<int>("Codice")
                        .HasColumnType("int");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Operatore")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("QuantitaEseguiti")
                        .HasColumnType("int");

                    b.Property<int?>("QuantitaFalliti")
                        .HasColumnType("int");

                    b.Property<int?>("QuantitaPassati")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ValoriDiRiferimento")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Codice");

                    b.HasIndex("Operatore");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestProdottoAssemblato", b =>
                {
                    b.Property<int>("CodiceTest")
                        .HasColumnType("int");

                    b.Property<int>("CodiceProdottoAssemblato")
                        .HasColumnType("int");

                    b.HasKey("CodiceTest", "CodiceProdottoAssemblato");

                    b.HasIndex("CodiceProdottoAssemblato");

                    b.ToTable("TestProdottoAssemblato");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestProdottoCase", b =>
                {
                    b.Property<int>("CodiceTest")
                        .HasColumnType("int");

                    b.Property<int>("CodiceProdottoCase")
                        .HasColumnType("int");

                    b.HasKey("CodiceTest", "CodiceProdottoCase");

                    b.HasIndex("CodiceProdottoCase");

                    b.ToTable("TestProdottoCase");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestPrototipo", b =>
                {
                    b.Property<int>("CodiceTest")
                        .HasColumnType("int");

                    b.Property<int>("NumPrototipo")
                        .HasColumnType("int");

                    b.Property<int>("CodiceProgetto")
                        .HasColumnType("int");

                    b.HasKey("CodiceTest", "NumPrototipo", "CodiceProgetto")
                        .HasName("PK_TestPrototipo_1");

                    b.HasIndex("NumPrototipo", "CodiceProgetto");

                    b.ToTable("TestPrototipo");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AnalisiDiMercatoProgetti", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Impiegato", "CodiceOperatoreNavigation")
                        .WithMany("AnalisiDiMercatoProgettis")
                        .HasForeignKey("CodiceOperatore")
                        .HasConstraintName("FK_AnalisiDiMercato_AnalisiDiMercato")
                        .HasPrincipalKey("AziendaId")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("AnalisiDiMercatoProgettis")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_AnalisiDiMercato_Progetto")
                        .IsRequired();

                    b.Navigation("CodiceOperatoreNavigation");

                    b.Navigation("CodiceProgettoNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetRoleClaim", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserClaim", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserLogin", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserRole", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUserToken", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Componente", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Fornitura", "CodiceFornituraNavigation")
                        .WithMany("Componentes")
                        .HasForeignKey("CodiceFornitura")
                        .HasConstraintName("FK_Componente_Componente")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("Componentes")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_Componente_Progetto")
                        .IsRequired();

                    b.Navigation("CodiceFornituraNavigation");

                    b.Navigation("CodiceProgettoNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Fornitura", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Fornitore", "CodiceFornitoreNavigation")
                        .WithMany("Fornituras")
                        .HasForeignKey("CodiceFornitore")
                        .HasConstraintName("FK_Fornitura_Fornitura")
                        .IsRequired();

                    b.Navigation("CodiceFornitoreNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Impiegato", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.AspNetUser", "User")
                        .WithMany("Impiegatos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Impiegato_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.OrdineForniture", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Fornitura", "CodiceFornituraNavigation")
                        .WithMany("OrdineFornitures")
                        .HasForeignKey("CodiceFornitura")
                        .HasConstraintName("FK_OrdineForniture_Fornitura")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Ordini", "CodiceOrdineNavigation")
                        .WithMany("OrdineFornitures")
                        .HasForeignKey("CodiceOrdine")
                        .HasConstraintName("FK_OrdineForniture_Ordini")
                        .IsRequired();

                    b.Navigation("CodiceFornituraNavigation");

                    b.Navigation("CodiceOrdineNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Ordini", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Impiegato", "OperatoreNavigation")
                        .WithMany("Ordinis")
                        .HasForeignKey("Operatore")
                        .HasConstraintName("FK_Ordini_Ordini")
                        .HasPrincipalKey("AziendaId");

                    b.Navigation("OperatoreNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoAssemblato", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("ProdottoAssemblatos")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_ProdottoAssemblato_Progetto")
                        .IsRequired();

                    b.Navigation("CodiceProgettoNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoCase", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("ProdottoCases")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_ProdottoCase_Progetto")
                        .IsRequired();

                    b.Navigation("CodiceProgettoNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Progetto", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Cliente", "ClienteNavigation")
                        .WithMany("Progettos")
                        .HasForeignKey("Cliente")
                        .HasConstraintName("FK_Progetto_Cliente");

                    b.HasOne("Infrastruttura.Data.Modelli.Impiegato", "ProjectManagerNavigation")
                        .WithMany("Progettos")
                        .HasForeignKey("ProjectManager")
                        .HasConstraintName("FK_Progetto_Impiegato")
                        .HasPrincipalKey("AziendaId")
                        .IsRequired();

                    b.Navigation("ClienteNavigation");

                    b.Navigation("ProjectManagerNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Prototipo", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("Prototipos")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_Prototipo_Progetto")
                        .IsRequired();

                    b.Navigation("CodiceProgettoNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.RichiestaProgetto", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Cliente", "ClienteNavigation")
                        .WithMany("RichiestaProgettos")
                        .HasForeignKey("Cliente")
                        .HasConstraintName("FK_RichiestaProgetto_Cliente");

                    b.HasOne("Infrastruttura.Data.Modelli.Progetto", "CodiceProgettoNavigation")
                        .WithMany("RichiestaProgettos")
                        .HasForeignKey("CodiceProgetto")
                        .HasConstraintName("FK_RichiestaProgetto_Progetto");

                    b.HasOne("Infrastruttura.Data.Modelli.Impiegato", "OperatoreNavigation")
                        .WithMany("RichiestaProgettos")
                        .HasForeignKey("Operatore")
                        .HasConstraintName("FK_RichiestaProgetto_Impiegato")
                        .HasPrincipalKey("AziendaId")
                        .IsRequired();

                    b.Navigation("ClienteNavigation");

                    b.Navigation("CodiceProgettoNavigation");

                    b.Navigation("OperatoreNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Test", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Impiegato", "OperatoreNavigation")
                        .WithMany("Tests")
                        .HasForeignKey("Operatore")
                        .HasConstraintName("FK_Test_Impiegato")
                        .HasPrincipalKey("AziendaId");

                    b.Navigation("OperatoreNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestProdottoAssemblato", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.ProdottoAssemblato", "CodiceProdottoAssemblatoNavigation")
                        .WithMany("TestProdottoAssemblatos")
                        .HasForeignKey("CodiceProdottoAssemblato")
                        .HasConstraintName("FK_TestProdottoAssemblato_ProdottoAssemblato")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Test", "CodiceTestNavigation")
                        .WithMany("TestProdottoAssemblatos")
                        .HasForeignKey("CodiceTest")
                        .HasConstraintName("FK_TestProdottoAssemblato_Test")
                        .IsRequired();

                    b.Navigation("CodiceProdottoAssemblatoNavigation");

                    b.Navigation("CodiceTestNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestProdottoCase", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.ProdottoCase", "CodiceProdottoCaseNavigation")
                        .WithMany("TestProdottoCases")
                        .HasForeignKey("CodiceProdottoCase")
                        .HasConstraintName("FK_TestProdottoCase_ProdottoCase")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Test", "CodiceTestNavigation")
                        .WithMany("TestProdottoCases")
                        .HasForeignKey("CodiceTest")
                        .HasConstraintName("FK_TestProdottoCase_Test")
                        .IsRequired();

                    b.Navigation("CodiceProdottoCaseNavigation");

                    b.Navigation("CodiceTestNavigation");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.TestPrototipo", b =>
                {
                    b.HasOne("Infrastruttura.Data.Modelli.Test", "CodiceTestNavigation")
                        .WithMany("TestPrototipos")
                        .HasForeignKey("CodiceTest")
                        .HasConstraintName("FK_TestPrototipo_Test")
                        .IsRequired();

                    b.HasOne("Infrastruttura.Data.Modelli.Prototipo", "Prototipo")
                        .WithMany("TestPrototipos")
                        .HasForeignKey("NumPrototipo", "CodiceProgetto")
                        .HasConstraintName("FK_TestPrototipo_Prototipo")
                        .IsRequired();

                    b.Navigation("CodiceTestNavigation");

                    b.Navigation("Prototipo");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Impiegatos");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Cliente", b =>
                {
                    b.Navigation("Progettos");

                    b.Navigation("RichiestaProgettos");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Fornitore", b =>
                {
                    b.Navigation("Fornituras");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Fornitura", b =>
                {
                    b.Navigation("Componentes");

                    b.Navigation("OrdineFornitures");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Impiegato", b =>
                {
                    b.Navigation("AnalisiDiMercatoProgettis");

                    b.Navigation("Ordinis");

                    b.Navigation("Progettos");

                    b.Navigation("RichiestaProgettos");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Ordini", b =>
                {
                    b.Navigation("OrdineFornitures");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoAssemblato", b =>
                {
                    b.Navigation("TestProdottoAssemblatos");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.ProdottoCase", b =>
                {
                    b.Navigation("TestProdottoCases");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Progetto", b =>
                {
                    b.Navigation("AnalisiDiMercatoProgettis");

                    b.Navigation("Componentes");

                    b.Navigation("ProdottoAssemblatos");

                    b.Navigation("ProdottoCases");

                    b.Navigation("Prototipos");

                    b.Navigation("RichiestaProgettos");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Prototipo", b =>
                {
                    b.Navigation("TestPrototipos");
                });

            modelBuilder.Entity("Infrastruttura.Data.Modelli.Test", b =>
                {
                    b.Navigation("TestProdottoAssemblatos");

                    b.Navigation("TestProdottoCases");

                    b.Navigation("TestPrototipos");
                });
#pragma warning restore 612, 618
        }
    }
}
